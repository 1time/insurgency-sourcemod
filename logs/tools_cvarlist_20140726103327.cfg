// game=insurgency, version=1.2.5.8, appid=22288, map=peak_coop, totalcvar=1362

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "2"
BlendBonesMode "2"

// Flags: FCVAR_LAUNCHER
// Default: "0"
PhysPMC "0"

// Turn on achievement debug msgs.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
achievement_debug "0"

// Turn off achievements.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
achievement_disable "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
ai_LOS_mode "0"

// NPC Line-Of-Sight debug mode. If 1, solid entities that block NPC LOC will be highlighted with white bounding boxes. If 2, it'll show non-solid entities that would do it if they were solid.
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ai_debug_los "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_debug_ragdoll_magnets "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
ai_debug_shoot_positions "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_debug_speech "0"

// Maximum frametime to still play background expressions.
// Flags: FCVAR_GAMEDLL
// Default: "0.05"
ai_expression_frametime "0.05"

// Disable npc background expressions when you can't see them.
// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_expression_optimization "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_force_serverside_ragdoll "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_sequence_debug "0"

// Shows that bones that are setup every think
// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_setupbones_debug "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1.0"
ai_shot_bias_max "1.0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "-1.0"
ai_shot_bias_min "-1.0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
ai_show_hull_attacks "0"

// Flags: FCVAR_GAMEDLL
// Default: "1"
ai_use_visibility_cache "1"

// Toggle the 3-way animation blending code.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
anim_3wayblend "1"

// Show the (client) animation state for the specified entity (-1 for none).
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "-1"
anim_showstate "-1"

// 1 to output anim_showstate to Msg(). 2 to store in AnimState.log. 3 for both.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
anim_showstatelog "0"

// Allow AsyncBegin/EndRead()
// Default: "1"
async_allow_held_files "1"

// Set the async filesystem mode (0 = async, 1 = synchronous)
// Default: "0"
async_mode "0"

// Force async reads to serialize for profiling
// Default: "0"
async_serialize "0"

// Simulate a delay of up to a set msec per file operation
// Default: "0"
async_simulate_delay "0"

// Flags: FCVAR_GAMEDLL
// Default: "0.99"
autoaim_max_deflect "0.99"

// Flags: FCVAR_GAMEDLL
// Default: "2160"
autoaim_max_dist "2160"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL
// Default: "1"
autoaim_viewing_client "1"

// Default: "1"
blackbox "1"

// How often we should sample our target's position and velocity to update our aim tracking, to allow realistic slop in tracking
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.55"
bot_aim_aimtracking_base "0.55"

// Frac appplied to the head aim tracking interval if difficulty is easy
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "1.25"
bot_aim_aimtracking_frac_easy "1.25"

// Frac appplied to the head aim tracking interval if difficulty is hard
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.85"
bot_aim_aimtracking_frac_hard "0.85"

// Frac appplied to the head aim tracking interval if difficulty is impossible
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.75"
bot_aim_aimtracking_frac_impossible "0.75"

// How fast do the bots turn their heads ( deg/second )
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "1" Max: "2000"
// Default: "900.0"
bot_aim_angularvelocity_base "900.0"

// How fast do the bots turn their heads WHEN OUT OF COMBAT( deg/second )
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "1" Max: "2000"
// Default: "800.0"
bot_aim_angularvelocity_base_ooc "800.0"

// Frac appplied to the angular velocity if difficulty is easy
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.8"
bot_aim_angularvelocity_frac_easy "0.8"

// Frac appplied to the angular velocity if difficulty is hard
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "1.1"
bot_aim_angularvelocity_frac_hard "1.1"

// Frac appplied to the angular velocity if difficulty is impossible
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "1.25"
bot_aim_angularvelocity_frac_impossible "1.25"

// The easy frac for aim tolerance for the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "5"
// Default: "1.00"
bot_aim_attack_aimtolerance_frac_easy "1.00"

// The hard frac for aim tolerance for the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "5"
// Default: "0.60"
bot_aim_attack_aimtolerance_frac_hard "0.60"

// The impossible frac for aim tolerance for the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "5"
// Default: "0.50"
bot_aim_attack_aimtolerance_frac_impossible "0.50"

// The normal frac for aim tolerance for the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "5"
// Default: "0.70"
bot_aim_attack_aimtolerance_frac_normal "0.70"

// How much should we offset our aim after just spotting enemy nearby
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "25"
bot_attack_aimpenalty_amt_close "25"

// How much should we offset our aim after just spotting enemy a long way away
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "70"
bot_attack_aimpenalty_amt_far "70"

// Multiply amt by this much for easy difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "1.75"
bot_attack_aimpenalty_amt_frac_easy "1.75"

// Multiply amt by this much for hard difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.80"
bot_attack_aimpenalty_amt_frac_hard "0.80"

// Multiply amt by this much for impossible difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.70"
bot_attack_aimpenalty_amt_frac_impossible "0.70"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
bot_attack_aimpenalty_debug "0"

// How long before we stop penalizing aim position nearby?
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "1.5"
bot_attack_aimpenalty_time_close "1.5"

// How long before we stop penalizing aim position a long way away?
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "8"
bot_attack_aimpenalty_time_far "8"

// How much should we artificially bloat aimtolerance boxes for enemies we just spotted?
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "6.0"
bot_attack_aimtolerance_newthreat_amt "6.0"

// How long before we stop artificially bloating aimtolerance box?
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "2.0"
bot_attack_aimtolerance_newthreat_time "2.0"

// The maximum amount of time the bot pulls the trigger for automatic weapons
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.8"
bot_attack_burst_maxtime "10"

// The minimum amount of time the bot pulls the trigger for automatic weapons
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.2"
bot_attack_burst_mintime "1"

// The maximum amount of time until the bot retargets
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.7"
bot_attack_retarget_maxtime "0.7"

// The minimum amount of time until the bot retargets
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.4"
bot_attack_retarget_mintime "0.4"

// Attack delay base value in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.0"
bot_attackdelay_base "1.0"

// Frac applied if distance is greater than hipfire range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.0"
bot_attackdelay_frac_desiredrange "1.0"

// Frac applied if in easy difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.1"
bot_attackdelay_frac_difficulty_easy "1.1"

// Frac applied if in hard difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.9"
bot_attackdelay_frac_difficulty_hard "0.9"

// Frac applied if in impossible difficulty
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.8"
bot_attackdelay_frac_difficulty_impossible "0.8"

// Frac applied if within hipfire range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "0.35"
bot_attackdelay_frac_hipfirerange "0.35"

// Frac applied if distance is greater than desired range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.5"
bot_attackdelay_frac_maxrange "2.5"

// Frac applied if distance is greater than max range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "3.0"
bot_attackdelay_frac_outofrange "3.0"

// Frac applied if the bot is not looking at the player
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.0"
bot_attackdelay_frac_outsidefov "2.0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "768"
bot_behav_retreat_to_hidingspot_range "768"

// Float representing the damage bots give off.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.6"
bot_damage "0.6"

// Disable bot shooting
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
bot_disable_attack "0"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.2"
bot_grenade_think_time "0.2"

// Max range that a flashbang will effect the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "750.0"
bot_hearing_flashbang_effect_max_distance "750.0"

// Max time that a flashbang will effect the bots
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "10.0"
bot_hearing_flashbang_effect_max_time "10.0"

// How far away can a bot hear a grenade explosion
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "3000.0f"
bot_hearing_grenade_hearing_range "3000.0f"

// By what percentage do silenced weapons reduce the hearing range
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.25"
bot_hearing_silenced_weapon_sound_reduction "0.25"

// Maximum tme to hold the sprint when ShouldHurry returns true
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.01" Max: "2"
// Default: "0.15"
bot_loco_hurry_sprinthold_max "0.15"

// Minimum tme to hold the sprint when ShouldHurry returns true
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.01" Max: "2"
// Default: "0.05"
bot_loco_hurry_sprinthold_min "0.05"

// Maximum distance a bot will run a retreat path
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "640.0"
bot_loco_path_max_retreat_length "640.0"

// Minimum look-ahead distance for bot pathing
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0" Max: "2000"
// Default: "120"
bot_loco_path_minlookahead "120"

// Maximum tme to hold the walk button when within slowdown distance
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.01" Max: "2"
// Default: "0.4"
bot_loco_slowdown_walkhold_max "0.4"

// Minimum tme to hold the walk button when within slowdown distance
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.01" Max: "2"
// Default: "0.1"
bot_loco_slowdown_walkhold_min "0.1"

// Bot uses usercmd of player by index.
// Flags: FCVAR_GAMEDLL
// Default: "0"
bot_mimic "0"

// Frac applied to the desired range of bots
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.0"
bot_range_frac_desiredrange "1.0"

// Frac applied to the hipfire range of bots
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.0"
bot_range_frac_hipfirerange "1.0"

// Frac applied to the max range of bots
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "1.0"
bot_range_frac_maxrange "1.0"

// Multiplier applied to recoil if the shooter is a bot
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.8"
bot_recoil_multiplier "0.8"

// The targeting noise X value
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "1" Max: "100"
// Default: "40"
bot_targeting_noise_x_base "40"

// The targeting noise frac applied to X value on desired range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.5"
bot_targeting_noise_x_frac_desiredrange "2.5"

// The targeting noise frac applied to X value on hipfire range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.0"
bot_targeting_noise_x_frac_hipfirerange "2.0"

// The targeting noise frac applied to X value on max range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "3.0"
bot_targeting_noise_x_frac_maxrange "3.0"

// The targeting noise Y value
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "1" Max: "100"
// Default: "40"
bot_targeting_noise_y_base "40"

// The targeting noise frac applied to Y value on desired range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.5"
bot_targeting_noise_y_frac_desiredrange "2.5"

// The targeting noise frac applied to Y value on hipfire range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.0"
bot_targeting_noise_y_frac_hipfirerange "2.0"

// The targeting noise frac applied to Y value on max range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "3.0"
bot_targeting_noise_y_frac_maxrange "3.0"

// The targeting noise Z value
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "1" Max: "100"
// Default: "60"
bot_targeting_noise_z_base "60"

// The targeting noise frac applied to Z value on desired range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.5"
bot_targeting_noise_z_frac_desiredrange "2.5"

// The targeting noise frac applied to Z value on hipfire range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "2.0"
bot_targeting_noise_z_frac_hipfirerange "2.0"

// The targeting noise frac applied to Z value on max range
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0.1" Max: "10"
// Default: "3.0"
bot_targeting_noise_z_frac_maxrange "3.0"

// FOV when the bot is trying to attack
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "45" Max: "100"
// Default: "90.0"
bot_vis_fov_attack_base "90.0"

// Frac applied to the FOV if the difficulty is easy
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "3"
// Default: "0.95"
bot_vis_fov_frac_easy "0.95"

// Frac applied to the FOV if the difficulty is hard
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "3"
// Default: "1.05"
bot_vis_fov_frac_hard "1.05"

// Frac applied to the FOV if the difficulty is impossible
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "3"
// Default: "1.1"
bot_vis_fov_frac_impossible "1.1"

// FOV when the bot is idle/guarding (normal difficulty)
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "90" Max: "200"
// Default: "175.0"
bot_vis_fov_idle_base "175.0"

// Time it takes for bot to recognize a target (normal difficulty)
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.32"
bot_vis_recognizetime_base "0.32"

// Frac appplied to the recognize time if difficulty is easy
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "1.60"
bot_vis_recognizetime_frac_easy "1.60"

// Frac appplied to the recognize time if difficulty is hard
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.75"
bot_vis_recognizetime_frac_hard "0.75"

// Frac appplied to the recognize time if difficulty is impossible
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Min: "0.1" Max: "2"
// Default: "0.50"
bot_vis_recognizetime_frac_impossible "0.50"

// Flags: FCVAR_GAMEDLL
// Default: "0"
breakable_disable_gib_limit "0"

// Flags: FCVAR_GAMEDLL
// Default: "1"
breakable_multiplayer "1"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
bullet_ff_through_walls "0"

// If set one, many debug prints to help track down the TLK_IDLE issue. Set two for super verbose info
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE
// Default: "0"
chet_debug_idle "0"

// Spew choreo. Use a sub-string or * to display all events.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: ""
choreo_spew_filter ""

// Current clan ID for name decoration
// Flags: FCVAR_MATERIAL_SYSTEM|FCVAR_ARCHIVE|FCVAR_USERINFO
// Default: "0"
cl_clanid "0"

// Enable/disable clock correction on the client.
// Flags: FCVAR_CHEAT
// Default: "1"
cl_clock_correction "1"

// Sets the maximum number of milliseconds per second it is allowed to correct the client clock. It will only correct this amount if the difference between the client and server clock is equal to or larger than cl_clock_correction_adjustment_max_offset.
// Flags: FCVAR_CHEAT
// Default: "200"
cl_clock_correction_adjustment_max_amount "200"

// As the clock offset goes from cl_clock_correction_adjustment_min_offset to this value (in milliseconds), it moves towards applying cl_clock_correction_adjustment_max_amount of adjustment. That way, the response is small when the offset is small.
// Flags: FCVAR_CHEAT
// Default: "90"
cl_clock_correction_adjustment_max_offset "90"

// If the clock offset is less than this amount (in milliseconds), then no clock correction is applied.
// Flags: FCVAR_CHEAT
// Default: "10"
cl_clock_correction_adjustment_min_offset "10"

// Force clock correction to match the server tick + this offset (-999 disables it).
// Flags: FCVAR_CHEAT
// Default: "999"
cl_clock_correction_force_server_tick "999"

// Show debugging info about the clock drift. 
// Flags: FCVAR_CHEAT
// Default: "0"
cl_clock_showdebuginfo "0"

// Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's.
// Flags: FCVAR_CHEAT
// Default: "150"
cl_clockdrift_max_ms "150"

// Maximum number of milliseconds the clock is allowed to drift before the client snaps its clock to the server's.
// Flags: FCVAR_CHEAT
// Default: "0"
cl_clockdrift_max_ms_threadmode "0"

// Configuration layout version. Bump this to force a reset of the PS3 save game / settings.
// Flags: FCVAR_LAUNCHER
// Default: "8"
cl_configversion "8"

// Flags: FCVAR_GAMEDLL
// Default: "1"
cl_csm_auto_entity "1"

// Force connection attempts to time out
// Flags: FCVAR_LAUNCHER
// Default: "0"
cl_failremoteconnections "0"

// Interpolate entities on the client.
// Flags: FCVAR_LAUNCHER|FCVAR_USERINFO
// Default: "1.0"
cl_interpolate "1.0"

// Flags: FCVAR_MATERIAL_SYSTEM
// Default: "0"
cl_mychangelist "2549"

// Delay in seconds before the client will resend the 'connect' attempt
// Flags: FCVAR_DATACACHE
// Min: "1.5" Max: "20"
// Default: "6"
cl_resend "6"

// Total time allowed for the client to resend the 'connect' attempt
// Flags: FCVAR_DATACACHE
// Min: "1.5" Max: "20000"
// Default: "60"
cl_resend_timeout "60"

// Use SIMD bone setup.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
cl_simdbones "0"

// Set to 1 to skip any models that don't go through the model fast path
// Flags: FCVAR_CHEAT|FCVAR_SOUNDSYSTEM
// Default: "0"
cl_skipslowpath "0"

// 1 use SIMD bones 0 use scalar bones.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
cl_use_simd_bones "1"

// Host game client port
// Flags: FCVAR_DATACACHE
// Default: "27005"
clientport "27005"

// Flags: FCVAR_GAMEDLL
// Default: "0.2"
collision_shake_amp "0.2"

// Flags: FCVAR_GAMEDLL
// Default: "0.5"
collision_shake_freq "0.5"

// Flags: FCVAR_GAMEDLL
// Default: "0.5"
collision_shake_time "0.5"

// Console output gets written to this file
// Flags: FCVAR_DATACACHE
// Default: ""
con_logfile ""

// Prefix console.log entries with timestamps
// Default: "0"
con_timestamp "0"

// Cooperative play.
// Flags: FCVAR_NOTIFY
// Default: "0"
coop "0"

// CPU Level - Default: High
// Default: "2"
cpu_level "2"

// Cascaded shadow map quality level, [0,3], 0=VERY_LOW, 3=HIGHEST
// Default: "0"
csm_quality_level "0"

// Flags: FCVAR_GAMEDLL
// Default: "0.5"
curve_bias "0.5"

// Size in MB.
// Min: "0" Max: "128"
// Default: "32"
datacachesize "32"

// Default: "0"
dbg_demofile "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: ""
dbg_movement ""

// Running a deathmatch server.
// Flags: FCVAR_NOTIFY
// Default: "0"
deathmatch "1"

// Prints CRC for each map lump loaded
// Flags: FCVAR_LAUNCHER
// Default: "0"
debug_map_crc "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
debug_materialmodifycontrol "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
debug_overlay_fullposition "0"

// Flags: FCVAR_LAUNCHER
// Default: "0"
debug_paint_alpha "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
debug_physimpact "0"

// Spew touch link activity
// Flags: FCVAR_GAMEDLL
// Default: "0"
debug_touchlinks "0"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
debug_visibility_monitor "0"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "10"
decalfrequency "10"

// Flags: FCVAR_LAUNCHER
// Default: "0"
dev_force_selected_device "0"

// Set developer message level
// Flags: FCVAR_DATACACHE
// Default: "0"
developer "0"

// If non-zero when a map loads, static props won't be loaded
// Flags: FCVAR_CHEAT
// Default: "0"
disable_static_prop_loading "0"

// Default: "0"
disp_dynamic "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
dispcoll_drawplane "0"

// Flags: FCVAR_CHEAT
// Default: "0"
display_game_events "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
displaysoundlist "0"

// (SP only) - show entities that were copied using small optimized lists (FL_EDICT_PARTIAL_CHANGE).
// Default: "0"
dt_ShowPartialChangeEnts "0"

// (SP only) - enable FL_EDICT_PARTIAL_CHANGE optimization.
// Default: "1"
dt_UsePartialChangeEnts "1"

// Print data table warnings?
// Default: "0"
dtwarning "0"

// Watch all fields encoded with this table.
// Default: ""
dtwatchclass ""

// When watching show decode.
// Default: "1"
dtwatchdecode "1"

// When watching show encode.
// Default: "1"
dtwatchencode "1"

// Watch this entities data table encoding.
// Default: "-1"
dtwatchent "-1"

// Watch the named variable.
// Default: ""
dtwatchvar ""

// Flags: FCVAR_GAMEDLL
// Default: ""
ent_debugkeys ""

// Visualizes all entity input/output activity.
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ent_messages_draw "0"

// Show entity contexts in ent_text display
// Flags: FCVAR_GAMEDLL
// Default: "0"
ent_show_contexts "0"

// Flags: FCVAR_LAUNCHER
// Default: "1"
fast_poly_convert "1"

// Size of per file buffers. 0 for none
// Default: "0"
filesystem_buffer_size "0"

// Default: "16"
filesystem_max_stdio_read "16"

// Use native FS or STDIO
// Default: "1"
filesystem_native "1"

// Default: "0"
filesystem_report_buffered_io "0"

// Default: "1"
filesystem_unbuffered_io "1"

// Flags: FCVAR_GAMEDLL
// Default: "3"
fire_absorbrate "3"

// Flags: FCVAR_GAMEDLL
// Default: "1"
fire_dmgbase "1"

// Flags: FCVAR_GAMEDLL
// Default: "1.0"
fire_dmginterval "1.0"

// Flags: FCVAR_GAMEDLL
// Default: "0.1"
fire_dmgscale "0.1"

// Flags: FCVAR_GAMEDLL
// Default: "5"
fire_extabsorb "5"

// Flags: FCVAR_GAMEDLL
// Default: "12"
fire_extscale "12"

// Flags: FCVAR_GAMEDLL
// Default: "1.0"
fire_growthrate "1.0"

// Flags: FCVAR_GAMEDLL
// Default: "1.0"
fire_heatscale "1.0"

// Flags: FCVAR_GAMEDLL
// Default: "0.1"
fire_incomingheatscale "0.1"

// Flags: FCVAR_GAMEDLL
// Default: "50"
fire_maxabsorb "50"

// Turns off interactive fish behavior. Fish become immobile and unresponsive.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
fish_dormant "0"

// Flags: FCVAR_GAMEDLL
// Default: "-"
flex_expression "-"

// Flags: FCVAR_GAMEDLL
// Default: "0"
flex_talk "0"

// Flags: FCVAR_CHEAT
// Default: "1"
fog_enable_water_fog "1"

// If enabled, prints diagnostic information about the current fog volume
// Flags: FCVAR_GAMEDLL
// Default: "0"
fog_volume_debug "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
force_show_lobby "0"

// Frame rate limiter
// Flags: FCVAR_DATACACHE
// Default: "300"
fps_max "300"

// Frame rate limiter, splitscreen
// Default: "300"
fps_max_splitscreen "300"

// 0:Off, 1:Any, 2:Sync only
// Default: "0"
fs_monitor_read_from_pack "0"

// 0:Off, 1:Always, 2:Not during load
// Default: "0"
fs_report_sync_opens "0"

// 0:Off, 1:Warn main thread, 2:Warn other threads
// Default: "0"
fs_warning_mode "0"

// Notification mode of usage of cheat commands.
// Min: "0" Max: "63"
// Default: "6"
ftz_cheats_notify_mode "6"

// The version of cheats plugin.
// Flags: FCVAR_NOTIFY|FCVAR_DONTRECORD
// Default: "1.1"
ftz_cheats_version "1.1"

// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_REPLICATED
// Default: "15"
func_break_max_pieces "15"

// Flags: FCVAR_GAMEDLL
// Default: ".5"
func_break_reduction_factor ".5"

// Flags: FCVAR_GAMEDLL
// Default: "0.5"
func_breakdmg_bullet "0.5"

// Flags: FCVAR_GAMEDLL
// Default: "1.5"
func_breakdmg_club "1.5"

// Flags: FCVAR_GAMEDLL
// Default: "1.25"
func_breakdmg_explosive "1.25"

// Use new style sparks.
// 
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "1"
fx_new_sparks "1"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
g_Language "0"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
g_debug_angularsensor "0"

// Enable debug printing about constraint sounds.
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
g_debug_constraint_sounds "0"

// Flags: FCVAR_GAMEDLL
// Default: "0"
g_debug_doors "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
g_debug_ragdoll_removal "0"

// Set to 1 and restart the map to be warned if the map has no trigger_transition volumes. Set to 2 to see a dump of all entities & associated results during a transition.
// Flags: FCVAR_GAMEDLL
// Default: "0"
g_debug_transitions "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "2"
g_ragdoll_important_maxcount "2"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "8"
g_ragdoll_maxcount "8"

// When -gamestatsfileoutputonly is specified, file will be emitted here instead of to modpath
// 
// Flags: FCVAR_GAMEDLL
// Default: ""
gamestats_file_output_directory ""

// Enables the global event log system
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
global_event_log_enabled "0"

// GPU Level - Default: High
// Default: "3"
gpu_level "3"

// Memory Level - Default: High
// Default: "2"
gpu_mem_level "2"

// Whether the server should be hidden from the master server
// Flags: FCVAR_GAMEDLL
// Default: "0"
hide_server "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
hl2_episodic "0"

// If activated HLstatsX commands are blocked from the chat area
// Flags: FCVAR_PLUGIN
// Default: "1"
hlx_block_commands "1"

// Define the prefix displayed on every HLstatsX ingame message
// Flags: FCVAR_PLUGIN
// Default: ""
hlx_message_prefix ""

// Address to be protected for logging/forwarding
// Flags: FCVAR_PLUGIN
// Default: ""
hlx_protect_address ""

// If enabled, adds "HLstatsX:CE" to server tags on supported games. 1 = Enabled (default), 0 = Disabled
// Flags: FCVAR_PLUGIN
// Min: "0" Max: "1"
// Default: "1"
hlx_server_tag "1"

// HLstatsX:CE Ingame Plugin
// Flags: FCVAR_NOTIFY|FCVAR_PLUGIN
// Default: "1.6.19"
hlxce_plugin_version "1.6.19"

// HLstatsX:CE
// Flags: FCVAR_NOTIFY|FCVAR_PLUGIN
// Default: ""
hlxce_version "1.6.19"

// http://www.hlxcommunity.com
// Flags: FCVAR_NOTIFY|FCVAR_PLUGIN
// Default: "http://www.hlxcommunity.com"
hlxce_webpage "http://ins.jballou.com/hlstatsx"

// Print # of IPC calls this number of times per second. If set to -1, the # of IPC calls is shown every frame.
// Default: "0"
host_ShowIPCCallCount "0"

// Memory threshold below which the host should flush caches between server instances
// Flags: FCVAR_DATACACHE
// Default: "12"
host_flush_threshold "12"

// Set to lock per-frame time elapse.
// Default: "0"
host_framerate "0"

// Apply cl_cmdrate and cl_updaterate to loopback connection
// Default: "0"
host_limitlocal "0"

// Current map name.
// Flags: FCVAR_DATACACHE
// Default: ""
host_map "peak_coop.bsp"

// Default: "0"
host_print_frame_times "0"

// Default: "0"
host_profile "0"

// Default: "1"
host_runframe_input_parcelremainder "1"

// Print a debug message when the client or server cache is missed.
// Default: "0"
host_showcachemiss "0"

// Force the host to sleep a certain number of milliseconds each frame.
// Flags: FCVAR_CHEAT
// Default: "0"
host_sleep "0"

// Show general system running times.
// Default: "0"
host_speeds "0"

// Run the host in threaded mode, (0 == off, 1 == if multicore, 2 == force)
// Flags: FCVAR_LAUNCHER
// Default: "0"
host_thread_mode "0"

// Run the sound on a thread (independent of mix)
// Default: "1"
host_threaded_sound "1"

// Run the sound on a simple thread not a jobthread
// Default: "0"
host_threaded_sound_simplethread "0"

// Prescale the clock by this amount.
// Flags: FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "1.0"
host_timescale "1.0"

// The HOST file to load.
// Flags: FCVAR_GAMEDLL|FCVAR_DATACACHE
// Default: "host.txt"
hostfile "host.txt"

// Host game server ip
// Flags: FCVAR_DATACACHE
// Default: ""
hostip "402496662"

// Hostname for server.
// Flags: FCVAR_DATACACHE
// Default: ""
hostname "VERY NOT FUN SERVER [MOD] [COOP]"

// Host game server port
// Flags: FCVAR_DATACACHE
// Default: "27015"
hostport "27015"

// Flags: FCVAR_CHEAT
// Default: "1"
hunk_track_allocation_types "1"

// Force user input to this split screen player.
// Flags: FCVAR_CHEAT
// Default: "0"
in_forceuser "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_MATERIAL_SYSTEM|FCVAR_CHEAT
// Default: "0"
ins_achievement_allow_cheats "0"

// Required amount of players on server
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_MATERIAL_SYSTEM|FCVAR_CHEAT
// Default: "8"
ins_achievement_required_players "8"

// Required amount of players on server for coop gamemodes
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_MATERIAL_SYSTEM|FCVAR_CHEAT
// Default: "2"
ins_achievement_required_players_coop "2"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "25"
ins_base_vehicle_max_turn_rate "25"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "160"
ins_base_vehicle_speed "160"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "22"
ins_bipod_view_length_forward "22"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "28"
ins_bipod_view_length_up "28"

// Base Rate for easy pistol fire, scaled faster by difficulty
// Flags: FCVAR_GAMEDLL
// Default: "4.0"
ins_bot_attack_pistol_fire_rate "4.0"

// Ratio of ammo that triggers a reload.
// Flags: FCVAR_GAMEDLL
// Default: "0.1"
ins_bot_attack_reload_ratio "0.1"

// When to change bot difficulty, 1 = instantly, 0 = when new bots are added
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "1"
ins_bot_change_difficulty "1"

// Difficulty of bots, 0-3
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "1"
ins_bot_difficulty "2"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ins_bot_knives_only "0"

// How far from the setup gate(s) defending bots can take up positions
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "2000"
ins_bot_max_setup_gate_defend_range "2000"

// How close from the setup gate(s) defending bots can take up positions. Areas closer than this will be in cover to ambush.
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "750"
ins_bot_min_setup_gate_defend_range "750"

// How far from the setup gate(s) a defending sniper will take up position
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "1500"
ins_bot_min_setup_gate_sniper_defend_range "1500"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "220"
ins_bot_pathfollower_aimahead "220"

// How many bots to place on each team when no players are present?
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE
// Default: "0"
ins_bot_quota "0"

// How close do bots need to be to hear radio commands from another.
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "2000"
ins_bot_radio_range "2000"

// If we don't have LoS, cut down range by this much
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.65"
ins_bot_radio_range_blocked_fraction "0.65"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "768"
ins_bot_retreat_to_cover_range "768"

// Total time we have to have seen a threat before lighting him up!
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0.50"
ins_bot_suppress_visible_requirement "0.50"

// How long should we light up the last spotted area of a threat
// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "3.0"
ins_bot_suppressing_fire_duration "3.0"

// Default size of the buy area on a weapon cache.
// Flags: FCVAR_GAMEDLL
// Default: "184"
ins_cache_buy_zone_size "184"

// Damage dealt by cache exploding
// Flags: FCVAR_GAMEDLL
// Default: "1000"
ins_cache_explosion_damage "1000"

// Radius of blast damage
// Flags: FCVAR_GAMEDLL
// Default: "256"
ins_cache_explosion_radius "256"

// Default health of a weapon cache entity.
// Flags: FCVAR_GAMEDLL
// Default: "200"
ins_cache_health "200"

// Restricts Spectator Modes
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0" Max: "3"
// Default: "0"
ins_deadcam_modes "0"

// Debug the centermass attachment
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0" Max: "1"
// Default: "0"
ins_debug_centermass "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ins_debug_chatter "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ins_debug_grenade_targets "0"

// Debug the head attachment
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0" Max: "1"
// Default: "0"
ins_debug_head "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ins_debug_investigationareas "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "0"
ins_debug_rpg_targets "0"

// Display enabled/disabled spawnpoints.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
ins_debug_spawnchange "0"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "620"
ins_nav_cp_surrounding_distance "620"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "400"
ins_nav_death_range "400"

// Flags: FCVAR_GAMEDLL|FCVAR_CHEAT
// Default: "1000"
ins_nav_in_combat_range "1000"

// Maximum team size
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "32"
// Default: "0"
ins_teamsize "0"

// Default size of the terminal access area.
// Flags: FCVAR_GAMEDLL
// Default: "72"
ins_terminal_access_zone_size "72"

// Default health of a terminal entity.
// Flags: FCVAR_GAMEDLL
// Default: "100"
ins_terminal_health "100"

// Default health of a minibus.
// Flags: FCVAR_GAMEDLL
// Default: "320"
ins_vehicle_minibus_health "320"

// Overrides IP for multihomed hosts
// Flags: FCVAR_DATACACHE
// Default: "localhost"
ip "23.253.156.150"

// Flag respawn time.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
item_flag_respawntime "0"

// 0 => Cross-shaped deadzone (default), 1 => Square deadzone.
// Default: "0"
joy_deadzone_mode "1"

// Automatically set to 1 if an xcontroller has been detected.
// Default: "1"
joy_xcontroller_found "0"

// Auto-center players on ladders.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
ladder_autocenter "1"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "120"
ladder_climb_speed "120"

// Use absolute (up is always up and down always down) ladder controls.
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
ladder_console_controls "0"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "-1" Max: "1"
// Default: "-0.3"
ladder_horizon "-0.3"

// Minimum 2D dot product from player's view to a ladder to be able to grab it
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "-1" Max: "1"
// Default: "0.5"
ladder_mountdot "0.5"

// 0:Off, 1:Timing, 2:Completions, 3:Late Completions, 4:Purges, -1:All 
// Default: "0"
loader_spew_info "0"

// (internal)
// Default: "0"
loader_spew_info_ex "0"

// Default: "1"
loader_throttle_io "1"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
loopsingleplayermaps "0"

// Flags: FCVAR_GAMEDLL
// Default: "listenserver.cfg"
lservercfgfile "listenserver.cfg"

// Disable area to area connection testing.
// Default: "0"
map_noareas "0"

// Name of the default .txt file used to cycle the maps on multiplayer servers 
// Flags: FCVAR_GAMEDLL
// Default: "mapcycle.txt"
mapcyclefile "mapcycle_cooperative.txt"

// Default: "0"
mat_aaquality "0"

// Default: "0"
mat_antialias "0"

// Default: "0"
mat_bufferprimitives "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_bumpbasis "0"

// Default: "1"
mat_bumpmap "1"

// Default: "1"
mat_compressedtextures "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_debugalttab "0"

// Default: "0"
mat_debugdepth "0"

// Flags: FCVAR_CHEAT
// Default: "0.0f"
mat_depthbias_normal "0.0f"

// Default: "1"
mat_detail_tex "1"

// Default: "1"
mat_diffuse "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_drawflat "0"

// Flags: FCVAR_LAUNCHER
// Min: "92" Max: "92"
// Default: "92"
mat_dxlevel "92"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_dynamicPaintmaps "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_dynamiclightmaps "0"

// Default: "128"
mat_envmapsize "128"

// Default: "32.0"
mat_envmaptgasize "32.0"

// Default: "1"
mat_exclude_async_update "1"

// Default: "0"
mat_excludetextures "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_fastnobump "0"

// Enable/Disable specularity for visual testing.  Will not reload materials and will not affect perf.
// Default: "1"
mat_fastspecular "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_fillrate "0"

// Default: "1"
mat_filterlightmaps "1"

// Default: "1"
mat_filtertextures "1"

// Flags: FCVAR_LAUNCHER
// Default: "0"
mat_force_vertexfog "0"

// Default: "1"
mat_forceaniso "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_forcedynamic "0"

// Default: "0"
mat_forcehardwaresync "0"

// Flags: FCVAR_LAUNCHER|FCVAR_CHEAT
// Default: "1"
mat_forcemanagedtextureintohardware "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_fullbright "0"

// Set to 0 for no HDR, 1 for LDR+bloom on HDR maps, and 2 for full HDR on HDR maps.
// Flags: FCVAR_LAUNCHER
// Default: "2"
mat_hdr_level "2"

// Default: "1"
mat_levelflush "1"

// Outputs .pfm files containing lightmap data for each lightmap page when a level exits.
// Flags: FCVAR_SOUNDSYSTEM
// Default: "0"
mat_lightmap_pfms "0"

// Flags: FCVAR_CHEAT
// Default: "1"
mat_loadtextures "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_luxels "0"

// Default: "1"
mat_maxframelatency "1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_measurefillrate "0"

// Default: "1"
mat_mipmaptextures "1"

// monitor gamma (typically 2.2 for CRT and 1.7 for LCD)
// Flags: FCVAR_ARCHIVE|FCVAR_ARCHIVE_XBOX
// Min: "1.6" Max: "2.6"
// Default: "2.2"
mat_monitorgamma "2.2"

// Flags: FCVAR_ARCHIVE|FCVAR_ARCHIVE_XBOX
// Default: "0"
mat_monitorgamma_tv_enabled "0"

// Min: "1" Max: "4"
// Default: "2.5"
mat_monitorgamma_tv_exp "2.5"

// Default: "235"
mat_monitorgamma_tv_range_max "235"

// Default: "16"
mat_monitorgamma_tv_range_min "16"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_morphstats "0"

// Default: "0"
mat_motion_blur_enabled "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_norendering "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_normalmaps "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_normals "0"

// Default: "0"
mat_paint_enabled "0"

// Default: "1"
mat_parallaxmap "1"

// Default: "1"
mat_phong "1"

// Min: "-10" Max: "4"
// Default: "0"
mat_picmip "0"

// Power Savings Mode
// Flags: FCVAR_ARCHIVE
// Default: "0"
mat_powersavingsmode "0"

// Constantly print to screen the top N models as measured by total faces rendered this frame
// Default: "0"
mat_print_top_model_vert_counts "0"

// Default: "0"
mat_processtoolvars "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_proxy "0"

// The queue/thread mode the material system should use: -1=default, 0=synchronous single thread, 1=queued single thread, 2=queued multithreaded
// Flags: FCVAR_DATACACHE
// Default: "-1"
mat_queue_mode "-1"

// Whether QMS can be enabled on single threaded CPU
// Flags: FCVAR_LAUNCHER
// Default: "0"
mat_queue_mode_force_allow "0"

// Flags: FCVAR_DATACACHE
// Default: "1"
mat_queue_priority "1"

// Default: "0"
mat_reducefillrate "0"

// Default: "0"
mat_reduceparticles "0"

// Set to N to count how many faces each model draws each frame and spew the top N offenders from the last 150 frames (use 'mat_rendered_faces_spew' to spew all models rendered in the current frame)
// Flags: FCVAR_CHEAT
// Default: "0"
mat_rendered_faces_count "0"

// Flags: FCVAR_SOUNDSYSTEM
// Default: "0"
mat_report_queue_status "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_reversedepth "0"

// Default: "1"
mat_shadowstate "1"

// Default: "0"
mat_showenvmapmask "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_showlowresimage "0"

// color-code miplevels 2: normalmaps, 1: everything else
// Flags: FCVAR_CHEAT
// Default: "0"
mat_showmiplevels "0"

// Software AA - perform a software anti-aliasing post-process (an alternative/supplement to MSAA). This value sets the strength of the effect: (0.0 - off), (1.0 - full)
// Default: "-1.0"
mat_software_aa_strength "-1.0"

// Default: "0"
mat_softwarelighting "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_softwareskin "0"

// Enable/Disable specularity for perf testing.  Will cause a material reload upon change.
// Default: "1"
mat_specular "1"

// Flags: FCVAR_ARCHIVE
// Default: "0"
mat_spewalloc "0"

// 0 - do not support flashlight (don't load flashlight shader combos), 1 - flashlight is supported
// Flags: FCVAR_LAUNCHER|FCVAR_CHEAT
// Default: "-1"
mat_supportflashlight "-1"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_tessellation_accgeometrytangents "0"

// Flags: FCVAR_CHEAT
// Default: "1"
mat_tessellation_cornertangents "1"

// Flags: FCVAR_CHEAT
// Default: "1"
mat_tessellation_update_buffers "1"

// Flags: FCVAR_LAUNCHER
// Default: "0"
mat_tonemapping_occlusion_use_stencil "0"

// This means we want triple buffering if we are fullscreen and vsync'd
// Default: "0"
mat_triplebuffered "0"

// Force sync to vertical retrace
// Min: "0" Max: "1"
// Default: "0"
mat_vsync "0"

// Flags: FCVAR_CHEAT
// Default: "0"
mat_wireframe "0"

// Seconds after a swing until we reset the combo activities
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "1.2"
melee_combo_reset_time "1.2"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
melee_show_swing "0"

// Dump current and max heap usage info to console at end of frame ( set to 2 for continuous output )
// 
// Default: "0"
mem_dumpstats "0"

// Force cache flush of unlocked resources on every alloc
// Default: "0"
mem_force_flush "0"

// Cache section to restrict mem_force_flush
// Default: ""
mem_force_flush_section ""

// Rate at which to attempt internal heap compation
// Flags: FCVAR_CHEAT
// Default: ".5"
mem_incremental_compact_rate ".5"

// Memory Level - Default: High
// Default: "2"
mem_level "2"

// Maximum amount of memory to dedicate to engine hunk and datacache (in mb)
// Default: "256"
mem_max_heapsize "256"

// Maximum amount of memory to dedicate to engine hunk and datacache, for dedicated server (in mb)
// Default: "64"
mem_max_heapsize_dedicated "64"

// Minimum amount of memory to dedicate to engine hunk and datacache (in mb)
// Default: "48"
mem_min_heapsize "48"

// Write periodic memstats dumps every n seconds.
// Default: "0"
mem_periodicdumps "0"

// Run heap check at end of every frame
// 
// Default: "0"
mem_test_each_frame "0"

// Run heap check at a specified interval
// 
// Default: "0"
mem_test_every_n_seconds "0"

// Don't print stats when memtesting
// Default: "0"
mem_test_quiet "0"

// Metamod:Source Version
// Flags: FCVAR_SPONLY|FCVAR_NOTIFY
// Default: "1.10.1"
metamod_version "1.10.1V"

// Metamod:Source Base Folder
// Flags: FCVAR_SPONLY
// Default: "addons/metamod"
mm_basedir "addons/metamod"

// When performing CSGO community matchmaking look for servers with at least so many human players
// Flags: FCVAR_ARCHIVE|FCVAR_DATACACHE
// Default: "3"
mm_csgo_community_search_players_min "3"

// How many frames to delay before attempting to mount the xlsp patch.
// Flags: FCVAR_LAUNCHER
// Default: "6"
mm_datacenter_delay_mount_frames "6"

// Delay after datacenter update is enabled before data is actually queried.
// Flags: FCVAR_LAUNCHER
// Default: "2"
mm_datacenter_query_delay "2"

// Data version to report to DC.
// Flags: FCVAR_LAUNCHER
// Default: "5"
mm_datacenter_report_version "5"

// How many times can we retry retrieving each info chunk before failing.
// Flags: FCVAR_LAUNCHER
// Default: "3"
mm_datacenter_retry_infochunks_attempts "3"

// Interval between datacenter stats retries.
// Flags: FCVAR_LAUNCHER
// Default: "75"
mm_datacenter_retry_interval "75"

// Interval between datacenter stats updates.
// Flags: FCVAR_LAUNCHER
// Default: "3600"
mm_datacenter_update_interval "3600"

// Flags: FCVAR_LAUNCHER
// Default: "0"
mm_events_listeners_validation "0"

// Default: "300"
mm_heartbeat_seconds "300"

// Default: "60"
mm_heartbeat_seconds_xlsp "60"

// Default: "10"
mm_heartbeat_timeout "10"

// Default: "15"
mm_heartbeat_timeout_legacy "15"

// Metamod:Source Plugins File
// Flags: FCVAR_SPONLY
// Default: "addons/metamod/metaplugins.ini"
mm_pluginsfile "addons/metamod/metaplugins.ini"

// How long to wait between pinging internet server details.
// Flags: FCVAR_LAUNCHER
// Default: "1.0"
mm_server_search_inet_ping_interval "1.0"

// How often to refresh a listed server.
// Flags: FCVAR_LAUNCHER
// Default: "15"
mm_server_search_inet_ping_refresh "15"

// How long to wait for internet server details.
// Flags: FCVAR_LAUNCHER
// Default: "3.0"
mm_server_search_inet_ping_timeout "3.0"

// How many servers can be pinged for server details in a batch.
// Flags: FCVAR_LAUNCHER
// Default: "10"
mm_server_search_inet_ping_window "10"

// Duration of LAN discovery ping phase.
// Flags: FCVAR_LAUNCHER
// Default: "1.0"
mm_server_search_lan_ping_duration "1.0"

// Interval between LAN discovery pings.
// Flags: FCVAR_LAUNCHER
// Default: "0.4"
mm_server_search_lan_ping_interval "0.4"

// Ports to scan during LAN games discovery. Also used to discover and correctly connect to dedicated LAN servers behind NATs.
// Flags: FCVAR_ARCHIVE|FCVAR_DATACACHE
// Default: "27015,27016,27017,27018,27019,27020"
mm_server_search_lan_ports "27015,27016,27017,27018,27019,27020"

// How long until a server is no longer returned by the master till we remove it.
// Flags: FCVAR_LAUNCHER
// Default: "180"
mm_server_search_server_lifetime "180"

// Interval between servers updates.
// Flags: FCVAR_LAUNCHER
// Default: "60"
mm_server_search_update_interval "60"

// Flags: FCVAR_LAUNCHER
// Default: "0"
mm_sv_load_test "0"

// This matchmaking query will override datacenter connectivity: -1 for local, 1 for dedicated
// Flags: FCVAR_LAUNCHER
// Default: "0"
mm_title_debug_dccheck "0"

// This matchmaking query will run with minimal set of parameters
// Flags: FCVAR_LAUNCHER
// Default: "0"
mm_title_debug_minquery "0"

// This matchmaking version will override .res file version for isolating matchmaking
// Flags: FCVAR_LAUNCHER
// Default: "0"
mm_title_debug_version "0"

// Min: "0"
// Default: "8"
mod_WeaponViewModelCache "8"

// Min: "0"
// Default: "10"
mod_WeaponWorldModelCache "10"

// Min: "0"
// Default: "3000"
mod_WeaponWorldModelMinAge "3000"

// Check all vcollides on load
// Default: "0"
mod_check_vcollide "0"

// For the dedicated server, don't load model vertex data
// Default: "1"
mod_dont_load_vertices "1"

// Forces all model file data into cache on model load.
// Default: "1"
mod_forcedata "1"

// Forces all model file data into cache on model load.
// Default: "1"
mod_forcetouchdata "1"

// Default: "0"
mod_load_anims_async "0"

// Forces all ANI file loading to stall for specified ms
// 
// Default: "0"
mod_load_fakestall "0"

// Default: "0"
mod_load_mesh_async "0"

// Indicates how far ahead in seconds to preload animations.
// Default: "1.0"
mod_load_preload "1.0"

// 1 - show hitches , 2 - show stalls
// Default: "0"
mod_load_showstall "0"

// Default: "0"
mod_load_vcollide_async "0"

// Default: "1"
mod_lock_mdls_on_load "1"

// Default: "1"
mod_lock_meshes_on_load "1"

// Log the filesystem type
// Default: "0"
mod_log_filesystem "0"

// Default: "0"
mod_test_mesh_not_available "0"

// Default: "0"
mod_test_not_available "0"

// Default: "0"
mod_test_verts_not_available "0"

// Touch model data during level startup
// Default: "1"
mod_touchalldata "1"

// Default: "0"
mod_trace_load "0"

// Default: "0"
morph_debug "0"

// Default: "7"
morph_path "7"

// Flags: FCVAR_GAMEDLL
// Default: "0"
mortar_visualize "0"

// The MOTD file to load.
// Flags: FCVAR_GAMEDLL|FCVAR_DATACACHE
// Default: "motd.txt"
motdfile "motd.txt"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.25"
movement_anim_playback_minrate "0.25"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "1"
mp_allowNPCs "1"

// toggles whether the server allows spectator mode or not
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1.0"
mp_allowspectators "1.0"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "1"
mp_autocrosshair "1"

// Kick team-killing players
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_autokick "1"

// Kick idlers players ( mins )
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
mp_autokick_idlers "0"

// Flags: FCVAR_GAMEDLL
// Default: "1"
mp_autoteambalance "0"

// Always have a counter-attack after each cap. Value represents number of human players needed.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
mp_checkpoint_counterattack_always "0"

// How long (in seconds) until the enemy counter-attack wave spawns.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "12"
mp_checkpoint_counterattack_delay "12"

// How long (in seconds) until the enemy counter-attack wave spawns (finale).
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "20"
mp_checkpoint_counterattack_delay_finale "20"

// How long a checkpoint counter-attack lasts
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "65"
mp_checkpoint_counterattack_duration "65"

// How long a checkpoint counter-attack lasts
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "120"
mp_checkpoint_counterattack_duration_finale "120"

// How long until we get the subsequent waves in Checkpoint finale?
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "60"
mp_checkpoint_counterattack_wave_finale "60"

// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL
// Default: "0"
mp_checkpoint_disable_victory "0"

// Size of coop lobby
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "1" Max: "8"
// Default: "6"
mp_coop_lobbysize "8.000000"

// Maximum number of bots allowed on the server.
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_REPLICATED
// Default: "18"
mp_coop_max_bots "48"

// The number of bots used for 1 player.
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_REPLICATED
// Default: "5"
mp_coop_min_bots "16"

// capture time in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Min: "1"
// Default: "2"
mp_cp_capture_time "30"

// deteriorate time in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Min: "0"
// Default: "8"
mp_cp_deteriorate_time "0"

// Maximum players to effect the speed-up.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "2"
mp_cp_speedup_max "2"

// Speed-up rate per additional teammate in the cap zone.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0.26"
mp_cp_speedup_rate "0.26"

// Flags: FCVAR_GAMEDLL
// Default: "0"
mp_defaultteam "0"

// Point to use for patrol (0 = random, 1-3 = specified point)
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_NOTIFY
// Min: "0" Max: "3"
// Default: "0"
mp_extract_point "0"

// After this amount of time of standing in place but aiming to one side, go ahead and move feet to face upper body.
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "3"
mp_facefronttime "3"

// fade a player's screen to black when he dies
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_fadetoblack "0"

// sqrt( 2 * gravity * x * 12 )
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0"
// Default: "720"
mp_fall_speed_fatal "720"

// sqrt( 2 * gravity * x * 12 )
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0"
// Default: "560"
mp_fall_speed_safe "560"

// sqrt( 2 * gravity * x * 12 )
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Min: "0"
// Default: "250"
mp_fall_speed_safe_iron "250"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "0"
mp_falldamage "0"

// How many degrees per second that we can turn our feet or upper body.
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "720"
mp_feetyawrate "720"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "0"
mp_flashlight "0"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "1"
mp_footsteps "1"

// SHORTRIFLE = 0
//  PISTOL = 1
//  KNIFE = 2 
//  LMG = 3
//  LAUNCHER = 4
//  GRENADE = 5
// 
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "-1" Max: "5"
// Default: "-1"
mp_forceactivityset "-1"

// Restricts spectator modes for dead players. 0 = Any team. 1 = Only own team. 2 = No one; fade to black on death (previously mp_fadetoblack).
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_DATACACHE
// Default: "1"
mp_forcecamera "1"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "1"
mp_forcerespawn "1"

// Round freeze time in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "15.0"
mp_freezetime "15.0"

// Allows team members to injure other members of their team
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED|FCVAR_DATACACHE
// Default: "1"
mp_friendlyfire "1"

// The frac value applied to friendly fire damage
// Flags: FCVAR_GAMEDLL
// Default: "0.25"
mp_friendlyfire_damage "0.25"

// The frac value applied to friendly fire damage when either in a spawn area
// Flags: FCVAR_GAMEDLL
// Default: "0.0"
mp_friendlyfire_damage_spawnarea "0.0"

// When enabled, friendlies can set off each other's explosives if they are reactive.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_friendlyfire_explosives "0"

// Current game mode, acceptable values are occupy, coop, battle, elimination and firefight; changed using map command, eg: map mapname elimination
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "firefight"
mp_gamemode "checkpoint"

// Use IK on in-place turns.
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_ik "1"

// How long to wait for the first round once the minimum players requirement has been reached.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "20"
mp_joinwaittime "20"

// Lobby time in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "10" Max: "30"
// Default: "10"
mp_lobbytime "10"

// Max games before map change
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0"
// Default: "1"
mp_maxgames "1"

// Max rounds before game ends
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0"
// Default: "10"
mp_maxrounds "10"

// min players on each team to start the match
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "1"
mp_minteamplayers "1"

// Number of waves given to a team for capturing the point.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_occupy_bonus_wave "1"

// Delay applied to resupplying
// Flags: FCVAR_GAMEDLL
// Default: "45"
mp_player_resupply_delay "1"

// Grace time in which the resupply delay is not applied.
// Flags: FCVAR_GAMEDLL
// Default: "20"
mp_player_resupply_grace "20"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_player_spotting "1"

// How long (in seconds) the round should be extended for after a capture.
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE
// Default: "300"
mp_push_capture_time_extension "300"

// If on, after full-cap victory, flip the attacking team for a counter attack round.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
mp_push_counter_round "0"

// If >0, advanced spawns will be delayed by this number of seconds.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
mp_push_deferred_advance "0"

// Min respawn wave interval.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_respawnwavetime_max "0"

// Max respawn wave interval.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_respawnwavetime_min "0"

// If non-zero, game will restart in the specified number of seconds
// Flags: FCVAR_GAMEDLL
// Default: "0"
mp_restartgame "0"

// If non-zero, round will restart in the specified number of seconds
// Flags: FCVAR_GAMEDLL
// Default: "0"
mp_restartround "0"

// Time a player can use their weapon inside a restricted area for.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "3"
mp_restricted_area_wpn_time "3600"

// Max lives in a round
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_roundlives "0"

// round time per map in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "3600"
// Default: "210"
mp_roundtime "900"

// Server will automatically scramble the teams if criteria met.  Only works on dedicated servers.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "0"
mp_scrambleteams_auto "0"

// Number of round wins a team must lead by in order to trigger an auto scramble.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "3"
mp_scrambleteams_auto_windifference "0"

// How long (in seconds) the round should be extended for after a cache gets destroyed.
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE
// Default: "120"
mp_searchdestroy_capture_time_extension "120"

// Max number of players where a single cache is used
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_NOTIFY
// Default: "12"
mp_searchdestroy_single_cache_max "12"

// Show entities that are removed on round respawn.
// Flags: FCVAR_LAUNCHER|FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "0"
mp_showcleanedupents "0"

// Show multiplayer client/server gesture slot information for the specified player index (-1 for no one).
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "-1"
mp_showgestureslots "-1"

// Force movement yaw along an animation path.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0"
mp_slammoveyaw "0"

// Spawn protection time in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "60"
// Default: "30"
mp_spawnprotectontime "30"

// When set to 0, chase camera in spectator mode is disabled
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_REPLICATED
// Default: "1"
mp_spectator_allow_chase "1"

// Amount of supply the more skilled players on the losing team get
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "2"
mp_supply_rate_losing_team_high "1"

// Amount of supply the less skilled players on the losing team get
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "1"
mp_supply_rate_losing_team_low "1"

// Amount of supply the more skilled players on the winning team get
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "3"
mp_supply_rate_winning_team_high "1"

// Amount of supply the less skilled players on the winning team get
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "2"
mp_supply_rate_winning_team_low "1"

// The amount of supply players start with
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "10"
mp_supply_token_base "10"

// The amount of supply bots start with
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "18"
mp_supply_token_bot_base "18"

// The maximum amount of supply a player can get
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "20"
mp_supply_token_max "20"

// Switch the teams after each game
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_switchteams_each_game "0"

// Switch the teams after each round
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_switchteams_each_round "0"

// Should supply be reset when teams are switched?
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_switchteams_reset_supply "0"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "hgrunt;scientist"
mp_teamlist "hgrunt;scientist"

// Flags: FCVAR_GAMEDLL
// Default: "1"
mp_teamoverride "1"

// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY
// Default: "0"
mp_teamplay "0"

// When enabled, players are automatically assigned to a team on join.
// Flags: FCVAR_GAMEDLL
// Default: "1"
mp_teams_auto_join "1"

// Teams are unbalanced when one team has this many more players than the other team. (0 disables check)
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "16"
// Default: "1"
mp_teams_unbalance_limit "1"

// If set, the given theater file is loaded instead.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: ""
mp_theater_override "default_training"

// Game time per map in minutes
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Default: "0"
mp_timelimit "0"

// Time to wait on an empty server before changing levels.
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "3600"
mp_timelimit_waiting "3600"

// Postgame timer in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "0"
mp_timer_postgame "5"

// Postround timer in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "15"
mp_timer_postround "5"

// Pregame timer in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "10"
mp_timer_pregame "5"

// Preround timer in seconds
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "15"
mp_timer_preround "5"

// Time given to post-game voting.
// Flags: FCVAR_GAMEDLL|FCVAR_NOTIFY|FCVAR_REPLICATED
// Min: "0" Max: "30"
// Default: "25"
mp_timer_voting "25"

// Will a TK'er be punished in the next round?  {0=no, 1=warning, 2=kill}
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_tkpunish "1"

// Max number of players where a single point is used
// Flags: FCVAR_GAMEDLL|FCVAR_ARCHIVE|FCVAR_NOTIFY
// Default: "10"
mp_vip_single_point_max "10"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0"
mp_voice_bias "0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.0"
mp_voice_blocked_lineofsight_enemy_volume "0.0"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.35"
mp_voice_blocked_lineofsight_friendly_volume "0.35"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.7"
mp_voice_indirect_listener_volume "0.7"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.4"
mp_voice_indirect_talker_volume "0.4"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "360"
mp_voice_max_distance_enemy "360"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "1080"
mp_voice_max_distance_friendly "1080"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.5"
mp_voice_max_enemy_volume "0.5"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.6"
mp_voice_max_friendly_volume "0.6"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "8"
mp_voice_min_distance_enemy "8"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Default: "8"
mp_voice_min_distance_friendly "8"

// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED|FCVAR_CHEAT
// Min: "0" Max: "1"
// Default: "0.3"
mp_voice_min_squad_volume "0.3"

// Alive players use spatial audio for voice communications?
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "1"
mp_voice_use_3d_voip "0"

// Amount of waves awarded for capturing points
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: ""
mp_wave_capture_increment ""

// Total waves for attackers
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "10"
mp_wave_count_attackers "10"

// Total waves for defenders
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "20"
mp_wave_count_defenders "20"

// Total waves per team
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "2"
mp_wave_count_perteam "2"

// Dead player ratio that triggers a reinforcement wave for attacking team
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.25"
mp_wave_dpr_attackers "0.25"

// Dead player ratio that triggers a reinforcement wave for defending team
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.25"
mp_wave_dpr_defenders "0.25"

// Dead player ratio that triggers a reinforcement wave for both teams
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "0.25"
mp_wave_dpr_perteam "0.25"

// Grace period where if a reinforcement wave occurs it does not get deducted from wave count
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "30"
mp_wave_grace_period "30"

// Max wave trigger time for attacking team
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "30"
mp_wave_max_wait_attackers "30"

// Max wave trigger time for defending team
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "30"
mp_wave_max_wait_defenders "30"

// Max wave trigger time for both teams
// Flags: FCVAR_GAMEDLL|FCVAR_REPLICATED
// Default: "40"
mp_wave_max_wait_perteam "40"

// Server side option to force instant spawni