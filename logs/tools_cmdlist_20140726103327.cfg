// game=insurgency, version=1.2.5.8, appid=22288, map=peak_coop, totalcmd=603

// Performs a bind <key> "increment var <cvar> 0 1 1"
BindToggle

Test_CreateEntity

Test_EHandle

Test_InitRandomEntitySpawner

// Test_Loop <loop name> - loop back to the specified loop start point unconditionally.
Test_Loop

// Test_LoopCount <loop name> <count> - loop back to the specified loop start point the specified # of times.
Test_LoopCount

// Test_LoopForNumSeconds <loop name> <time> - loop back to the specified start point for the specified # of seconds.
Test_LoopForNumSeconds

Test_ProxyToggle_EnableProxy

Test_ProxyToggle_SetValue

// Test_RandomChance <percent chance, 0-100> <token1> <token2...> - Roll the dice and maybe run the command following the percentage chance.
Test_RandomChance

Test_RandomPlayerPosition

Test_RandomizeInPVS

Test_RemoveAllRandomEntities

Test_RunFrame

Test_SendKey

Test_SpawnRandomEntities

// Test_StartLoop <loop name> - Denote the start of a loop. Really just defines a named point you can jump to.
Test_StartLoop

// Start a test script running..
Test_StartScript

Test_Wait

Test_WaitForCheckPoint

// Transmits Game Events to <address:port>
TransmitEvents

// Erases current game stats and writes out a blank stats file
_resetgamestats

// Shutdown and restart the engine.
_restart

// Add an IP address to the ban list.
addip

// Changes the density of air for drag computations.
air_density

// Alias a command.
alias

async_resume

async_suspend

// Add a user ID to the ban list.
banid

// Add an IP address to the ban list.
banip

// Bind a key.
bind

// Bind a key for OSX only.
bind_osx

// Dump the contents of the blackbox
blackbox_dump

// Record an entry into the blackbox
blackbox_record

// Toggle.  Player takes damage but won't die. (Shows red cross when health is zero)
buddha

// Turn a budget group on/off
budget_toggle_group

// Automatically swaps the current weapon for the bug bait and back again.
bug_swap

// cache_print [section]
// Print out contents of cache memory.
cache_print

// cache_print_lru [section]
// Print out contents of cache memory.
cache_print_lru

// cache_print_summary [section]
// Print out a summary contents of cache memory.
cache_print_summary

// Start a vote on an issue.
callvote

// Tests hull collision detection
cast_hull

// Tests collision detection
cast_ray

cc_SendRoundData

// Spawn airboat in front of the player.
ch_createairboat

// Spawn jeep in front of the player.
ch_createjeep

// Change server to the specified map
changelevel

// Transition to the specified map in single player
changelevel2

// Usage:
//  cl_csm_server_status
// 
cl_csm_server_status

// Clears the animation cache, freeing the memory (until the next time a streaming animblock is requested).
clear_anim_cache

// clears debug overlays
clear_debug_overlays

// Forward command to server.
cmd

// sets userinfo string for split screen player in slot 1
cmd1

// sets userinfo string for split screen player in slot 2
cmd2

// sets userinfo string for split screen player in slot 3
cmd3

// sets userinfo string for split screen player in slot 4
cmd4

// Tests collision system
collision_test

// Cause the engine to crash (Debug!!)
crash

create_flashlight

creditsdone

// Show the list of convars/concommands.
cvarlist

// Add a line to the debug history. Format: <category id> <line>
dbghist_addline

// Dump the debug history to the console. Format: <category id>
//     Categories:
//      0: Entity I/O
//      1: AI Decisions
//      2: Scene Print
//      3: Alyx Blind
//      4: Log of damage done to player
dbghist_dump

// Debug player template
debug_player_template

// Used by the devshots system to go to the next map in the devshots maplist.
devshots_nextmap

// Show all convars which are not at their default values.
differences

// Disconnect game from server.
disconnect

// List all collideable displacements
disp_list_all_collideable

// Displays how much time has elapsed since the game started
display_elapsedtime

// Draws a cross at the given location
// 	Arguments: x y z
drawcross

// Draws line between two 3D Points.
// 	Green if no collision
// 	Red is collides with something
// 	Arguments: x1 y1 z1 x2 y2 z2
drawline

// Write out the datatable instrumentation files (you must run with -dti for this to work).
dti_flush

// Print sizeof(entclass)
dump_entity_sizes

// Dump all global entities/states
dump_globals

// Lists all entity factory names.
dumpentityfactories

// Dump the contents of the Entity I/O event queue to the console.
dumpeventqueue

// Dump the contents of the game string table to the console.
dumpgamestringtable

// Print string tables to console.
dumpstringtables

// Lists all theater entity factory names.
dumptheaterentityfactories

// Echo text to console.
echo

// Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_absbox

// Displays the attachment points on an entity.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_attachments

// Displays the entity's autoaim radius.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at
ent_autoaim

// Displays the movement bounding box for the given entity(ies) in orange.  Some entites will also display entity specific overlays.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_bbox

// Cancels all ent_fire created outputs that are currently waiting for their delay to expire.
ent_cancelpendingentfires

// Creates an entity of the given type where the player is looking.
ent_create

// Usage:
//    ent_dump <entity name>
// 
ent_dump

// Usage:
//    ent_fire <target> [action] [value] [delay]
// 
ent_fire

// Usage:
//    ent_info <class name>
// 
ent_info

// Applies the comma delimited key=value pairs to the entity with the given Hammer ID.
// 	Format: ent_keyvalue <entity id> <key1>=<value1>,<key2>=<value2>,...,<keyN>=<valueN>
// 
ent_keyvalue

// Toggles input/output message display for the selected entity(ies).  The name of the entity will be displayed as well as any messages that it sends or receives.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at
ent_messages

ent_name

// Orient the specified entity to match the player's angles. By default, only orients target entity's YAW. Use the 'allangles' option to orient on all axis.
// 	Format: ent_orient <entity name> <optional: allangles>
ent_orient

// Toggles pausing of input/output message processing for entities.  When turned on processing of all message will stop.  Any messages displayed with 'ent_messages' will stop fading and be displayed indefinitely. To step through the messages one by one use 'ent_step'.
ent_pause

// Displays the pivot for the given entity(ies).
// 	(y=up=green, z=forward=blue, x=left=red). 
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_pivot

// Displays the total bounding box for the given entity(s) in green.  Some entites will also display entity specific overlays.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_rbox

// Removes the given entity(s)
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_remove

// Removes all entities of the specified type
// 	Arguments:   	{entity_name} / {class_name} 
ent_remove_all

// Rotates an entity by a specified # of degrees
ent_rotate

// Set entity angles
ent_setang

// Sets the targetname of the given entity(s)
// 	Arguments:   	{new entity name} {entity_name} / {class_name} / no argument picks what player is looking at 
ent_setname

// Move entity to position
ent_setpos

// Print, to the console, an entity's current criteria set used to select responses.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_show_response_criteria

// When 'ent_pause' is set this will step through one waiting input / output message at a time.
ent_step

// Teleport the specified entity to where the player is looking.
// 	Format: ent_teleport <entity name>
ent_teleport

// Displays text debugging information about the given entity(ies) on top of the entity (See Overlay Text)
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_text

// Displays the eye position for the given entity(ies) in red.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
ent_viewoffset

// Execute script file.
exec

// Execute script file if file exists.
execifexists

// Exit the engine.
exit

// Kills the player with explosive damage
explode

// Kills a player applying an explosive force. Usage: explodevector <player> <x value> <y value> <z value>
explodevector

// fadein {time r g b}: Fades the screen in from black or from the specified color over the given number of seconds.
fadein

// fadeout {time r g b}: Fades the screen to black or to the specified color over the given number of seconds.
fadeout

ff

// Find concommands with the specified string in their name/help text.
find

// Find and list all entities with classnames or targetnames that contain the specified substring.
// Format: find_ent <substring>
// 
find_ent

// Display data for entity matching specified index.
// Format: find_ent_index <index>
// 
find_ent_index

// Find concommands by flags.
findflags

firetarget

// Flush unlocked cache memory.
flush

// Flush unlocked and locked cache memory.
flush_locked

// Bind a command to an available key. (forcebind command opt:suggestedKey)
forcebind

// Give the engine control of the mouse.
foundry_engine_get_mouse_control

// Give the control of the mouse back to Hammer.
foundry_engine_release_mouse_control

// Select the entity under the crosshair or select entities with the specified name.
foundry_select_entity

// Move Hammer's 3D view to the same position as the engine's 3D view.
foundry_sync_hammer_view

// Updates the entity's position/angles when in edit mode
foundry_update_entity

// Show all files currently opened by the engine.
fs_printopenfiles

// Set the filesystem warning level.
fs_warning_level

// Give item to player.
// 	Arguments: <item_name>
give

// Give ammo for active weapon to the player
give_ammo

// Give a Gear to the player
give_gear

// Cheat to give player x number of supply
give_supply

// Install weapon upgrade for active weapon to the player
give_upgrade

// Give a weapon to the player
give_weapon

// global_set <globalname> <state>: Sets the state of the given env_global (0 = OFF, 1 = ON, 2 = DEAD).
global_set

// Toggle. Player becomes invulnerable.
god

// Toggle. All players become invulnerable.
gods

// Display ground entity list <index>
groundlist

// Updates the entity's position/angles when in edit mode
hammer_update_entity

// Updates entities in the map that can safely be updated (don't have parents or are affected by constraints). Also excludes entities mentioned in any hammer_updateignorelist objects in this map.
hammer_update_safe_entities

// Force heartbeat of master servers
heartbeat

// Find help about a convar/concommand.
help

hlx_message_prefix_clear

hlx_sm_browse

hlx_sm_bulkpsay

hlx_sm_csay

hlx_sm_hint

hlx_sm_msay

hlx_sm_player_action

hlx_sm_psay

hlx_sm_psay2

hlx_sm_redirect

hlx_sm_swap

hlx_sm_team_action

hlx_sm_tsay

hlx_sm_world_action

// Dumps time spent idle in previous frames in ms(dedicated only).
host_filtered_time_report

// Run off some time without rendering/updating sounds
// 
host_runofftime

// Spew CPU timer jitter for the last 128 frames in microseconds (dedicated only)
host_timer_report

hunk_print_allocations

// Hurts the player.
// 	Arguments: <health to lose>
hurtme

// Increment specified convar value.
incrementvar

// Cause the engine to go into an infinite loop (Debug!!)
infiniteloop

// Adds a bot
ins_bot_add

// Adds a bot to team 2
ins_bot_add_t2

// Kick a bot. Parameters: <#/bots> <team_id>
ins_bot_kick

// ins_bot_kick_t1 kick bot from team two
ins_bot_kick_t1

// ins_bot_kick_t2 kick bot from team two
ins_bot_kick_t2

// Remove given attribute from all areas in the selected set.
ins_clear_attribute

// Force a round cleanup
ins_debug_navareas

// Force a round cleanup
ins_force_cleanup

// Set attribute of selected area.
ins_mark

// Reload all the definition scripts
ins_reload_definitiondata_s

// Selects areas with the given attribute.
ins_select_with_attribute

// Server loads a theater
ins_server_loadtheater

ins_tank_health

ins_tank_kill

// Test map vote
ins_test_map_vote

// Creates a ragdoll for testing
ins_test_ragdoll

// Clear all INS-specific attributes of selected area.
ins_wipe_attributes

// Buys an item of gear
inventory_buy_gear

// Buys a weapon upgrade
inventory_buy_upgrade

// Buys a weapon
inventory_buy_weapon

// Confirming a purchase
inventory_confirm

// Reset the player's current loadout to the class default
inventory_reset

// Resupply current loadout
inventory_resupply

// Sell all items (except melee)
inventory_sell_all

// Sells an item of gear
inventory_sell_gear

// Sells an upgrade
inventory_sell_upgrade

// Sell a weapon
inventory_sell_weapon

// Set firemode pref
inventory_set_firemode

// Tests spatial partition for entities queries.
kdtree_test

// Find key bound to specified command string.
key_findbinding

// List bound keys with bindings.
key_listboundkeys

// Updates game keyboard layout to current windows keyboard setting.
key_updatelayout

// Kick a player by name.
kick

// Kick a player by userid or uniqueid, with a message.
kickid

// Kick a player by userid or uniqueid, provide a force-the-kick flag and also assign a message.
kickid_ex

// Kills the player with generic damage
kill

// Shutdown the server.
killserver

// Kills a player applying force. Usage: killvector <player> <x value> <y value> <z value>
killvector

// Removes the cheat flag for client, will bring fog back
l4d_no_fog_revoke

// Displays a list of the last 5 lines of speech from NPCs.
listRecentNPCSpeech

// Lists banned users.
listid

// List IP addresses on the ban list.
listip

// List all the issues that can be voted on.
listissues

listmaps

// List loaded models.
listmodels

loader_dump_table

// Enables logging to file, console, and udp < on | off >.
log

// Set address and port for remote host <ip:port>.
logaddress_add

// Remove address and port for remote host <ip:port>.
logaddress_del

// Remove all udp addresses being logged to
logaddress_delall

// List all addresses currently being used by logaddress.
logaddress_list

// Lookup Steam IDs of user
lookup_id

// Start playing on specified map.
map

// Runs a map as the background to the main menu.
map_background

// Start playing, with commentary, on a specified map.
map_commentary

// Specify a map group
mapgroup

// Displays list of maps.
maps

// show the current video control panel config for the material system
mat_configcurrent

// Activates debugging spew for a specific material.
mat_debug

// Report if HDR is enabled for debugging
mat_hdr_enabled

// Shows material system info
mat_info

// Reloads all materials
mat_reloadallmaterials

// Reloads a single material
mat_reloadmaterial

// Reloads all textures
mat_reloadtextures

// 'mat_rendered_faces_spew <n>' Spew the number of faces rendered for the top N models used this frame (mat_rendered_faces_count must be set to use this)
mat_rendered_faces_spew

// Reports the amount of size in bytes taken up by hardware morph textures.
mat_reporthwmorphmemory

// saves current video configuration to the registry
mat_savechanges

// Spew info about the hardware aspect ratio
mat_showaspectratioinfo

// Show materials.
mat_showmaterials

// Show materials (verbose version).
mat_showmaterialsverbose

// Show used textures.
mat_showtextures

// Suppress a material from drawing
mat_suppress

// Change the maximum number of players allowed on this server.
maxplayers

mem_compact

// Dump memory stats to text file.
mem_dump

mem_eat

mem_incremental_compact

mem_test

// Dumps the memory used by vcollides
mem_vcollide

// Verify the validity of the heap
mem_verify

// Print memory stats.
memory

// Metamod:Source control options
meta

// Shows information retrieved from data center
mm_datacenter_debugprint

// Shows information about dlc
mm_dlc_debugprint

// Matchmaking status
mm_status

// Dumps the weapon view model cache contents
mod_DumpWeaponWiewModelCache

// Dumps the weapon world model cache contents
mod_DumpWeaponWorldModelCache

motd

// Prevents a userid from being auto-kicked
mp_disable_autokick

// Scramble the teams and restart the game
mp_scrambleteams

// Switch teams and restart the game
mp_switchteams

// Multiply specified convar value.
multvar

// Add current area to the selected set.
nav_add_to_selected_set

// Add specified area id to the selected set.
nav_add_to_selected_set_by_id

// Re-analyze the current Navigation Mesh and save it to disk.
nav_analyze

// commandline hook to run a nav_analyze and then quit.
nav_analyze_scripted

// Toggles the 'avoid this area when possible' flag used by the AI system.
nav_avoid

// Defines a corner of a new Area or Ladder. To complete the Area or Ladder, drag the opposite corner to the desired location and issue a 'nav_end_area' command.
nav_begin_area

// Start continuously removing from the selected set.
nav_begin_deselecting

// Start dragging a selection area.
nav_begin_drag_deselecting

// Start dragging a selection area.
nav_begin_drag_selecting

// Start continuously adding to the selected set.
nav_begin_selecting

// Begin shifting the Selected Set.
nav_begin_shift_xy

// Attempts to build a nav ladder on the climbable surface under the cursor.
nav_build_ladder

// Scans the maps directory and reports any missing/out-of-date navigation files.
nav_check_file_consistency

// Updates the blocked/unblocked status for every nav area.
nav_check_floor

// Update the nav mesh STAIRS attribute
nav_check_stairs

// Chops all selected areas into their component 1x1 areas
nav_chop_selected

// Remove given nav attribute from all areas in the selected set.
nav_clear_attribute

// Clear the selected set.
nav_clear_selected_set

// Erase any previously placed walkable positions.
nav_clear_walkable_marks

// Re-orders area and ladder ID's so they are continuous.
nav_compress_id

// To connect two Areas, mark the first Area, highlight the second Area, then invoke the connect command. Note that this creates a ONE-WAY connection from the first to the second Area. To make a two-way connection, also connect the second area to the first.
nav_connect

// Lower the selected corner of the currently marked Area.
nav_corner_lower

// Places the selected corner of the currently marked Area on the ground.
nav_corner_place_on_ground

// Raise the selected corner of the currently marked Area.
nav_corner_raise

// Select a corner of the currently marked Area. Use multiple times to access all four corners.
nav_corner_select

// Toggles the 'must crouch in this area' flag used by the AI system.
nav_crouch

// Deletes the currently highlighted Area.
nav_delete

// Deletes the currently marked Area (if any).
nav_delete_marked

// To disconnect two Areas, mark an Area, highlight a second Area, then invoke the disconnect command. This will remove all connections between the two Areas.
nav_disconnect

// For each area in the selected set, disconnect all outgoing one-way connections.
nav_disconnect_outgoing_oneways

// Toggles the 'area is not suitable for hiding spots' flag used by the AI system.
nav_dont_hide

// Write the (x,y,z) coordinates of the centers of all selected nav areas to a file.
nav_dump_selected_set_positions

// Defines the second corner of a new Area or Ladder and creates it.
nav_end_area

// Stop continuously removing from the selected set.
nav_end_deselecting

// Stop dragging a selection area.
nav_end_drag_deselecting

// Stop dragging a selection area.
nav_end_drag_selecting

// Stop continuously adding to the selected set.
nav_end_selecting

// Finish shifting the Selected Set.
nav_end_shift_xy

// Selects the current Area and all Areas connected to it, recursively. To clear a selection, use this command again.
nav_flood_select

// Mark cliff areas, post-processing approximation
nav_gen_cliffs_approx

// Generate a Navigation Mesh for the current map and save it to disk.
nav_generate

// Generate a Navigation Mesh for the current map and save it to disk.
nav_generate_incremental

// Toggles the 'traverse this area by jumping' flag used by the AI system.
nav_jump

// Flips the selected ladder's direction.
nav_ladder_flip

// Loads the Navigation Mesh for the current map.
nav_load

// Lower the top of the drag select volume.
nav_lower_drag_volume_max

// Lower the bottom of the drag select volume.
nav_lower_drag_volume_min

// Chops the marked area into disconnected sub-areas suitable for sniper spots.
nav_make_sniper_spots

// Marks the Area or Ladder under the cursor for manipulation by subsequent editing commands.
nav_mark

// Set nav attribute for all areas in the selected set.
nav_mark_attribute

// Mark an Area with no Place name. Useful for finding stray areas missed when Place Painting.
nav_mark_unnamed

// Mark the current location as a walkable position. These positions are used as seed locations when sampling the map to generate a Navigation Mesh.
nav_mark_walkable

// To merge two Areas into one, mark the first Area, highlight the second by pointing your cursor at it, and invoke the merge command.
nav_merge

// Merges a saved selected set into the current mesh.
nav_merge_mesh

// Toggles the 'hostages cannot use this area' flag used by the AI system.
nav_no_hostages

// Toggles the 'dont jump in this area' flag used by the AI system.
nav_no_jump

// Sets the Place of the Area under the cursor to the curent Place, and 'flood-fills' the Place to all adjacent Areas. Flood-filling stops when it hits an Area with the same Place, or a different Place than that of the initial Area.
nav_place_floodfill

// Lists all place names used in the map.
nav_place_list

// Sets the current Place to the Place of the Area under the cursor.
nav_place_pick

// Replaces all instances of the first place with the second place.
nav_place_replace

// Sets the Place of all selected areas to the current Place.
nav_place_set

// Toggles the 'dont avoid obstacles' flag used by the AI system.
nav_precise

// Raise the top of the drag select volume.
nav_raise_drag_volume_max

// Raise the bottom of the drag select volume.
nav_raise_drag_volume_min

// Re-selects the stored selected set.
nav_recall_selected_set

// Remove current area from the selected set.
nav_remove_from_selected_set

// Removes legacy jump areas, replacing them with connections.
nav_remove_jump_areas

// Toggles the 'traverse this area by running' flag used by the AI system.
nav_run

// Saves the current Navigation Mesh to disk.
nav_save

// Writes the selected set to disk for merging into another mesh via nav_merge_mesh.
nav_save_selected

// Adds all blocked areas to the selected set
nav_select_blocked_areas

// Adds all damaging areas to the selected set
nav_select_damaging_areas

// Selects any areas that intersect the given half-space.
nav_select_half_space

// Adds all invalid areas to the Selected Set.
nav_select_invalid_areas

// Select nav areas where both dimensions are larger than the given size.
nav_select_larger_than

// Adds all obstructed areas to the selected set
nav_select_obstructed_areas

// Adds all orphan areas to the selected set (highlight a valid area first).
nav_select_orphans

// Selects nav areas that are overlapping others.
nav_select_overlapping

// Adds all areas in a radius to the selection set
nav_select_radius

// Adds all stairway areas to the selected set
nav_select_stairs

// Sets the editor into or out of Place mode. Place mode allows labelling of Area with Place names.
nav_set_place_mode

// Shifts the selected areas by the specified amount
nav_shift

// Show the (x,y,z) coordinate positions of the given dump file.
nav_show_dumped_positions

// Chops all selected areas into their component 1x1 areas and re-merges them together into larger areas
nav_simplify_selected

// To splice, mark an area, highlight a second area, then invoke the splice command to create a new, connected area between them.
nav_splice

// To split an Area into two, align the split line using your cursor and invoke the split command.
nav_split

// Toggles the 'stand while hiding' flag used by the AI system.
nav_stand

// Toggles the 'must stop when entering this area' flag used by the AI system.
nav_stop

// Stores the current selected set for later retrieval.
nav_store_selected_set

// Strips all Hiding Spots, Approach Points, and Encounter Spots from the current Area.
nav_strip

// Subdivides all selected areas.
nav_subdivide

// Test the selected set for being on stairs
nav_test_stairs

// Start or stop continuously removing from the selected set.
nav_toggle_deselecting

// Remove current area from the selected set.
nav_toggle_in_selected_set

// Toggle the editor into and out of Place mode. Place mode allows labelling of Area with Place names.
nav_toggle_place_mode

// Toggles Place Painting mode. When Place Painting, pointing at an Area will 'paint' it with the current Place.
nav_toggle_place_painting

// Toggles all areas into/out of the selected set.
nav_toggle_selected_set

// Start or stop continuously adding to the selected set.
nav_toggle_selecting

// Toggles the 'area is transient and may become blocked' flag used by the AI system.
nav_transient

// Clears the marked Area or Ladder.
nav_unmark

// Updates the blocked/unblocked status for every nav area.
nav_update_blocked

// Recomputes lighting values
nav_update_lighting

// If used without arguments, all available Places will be listed. If a Place argument is given, the current Place is set.
nav_use_place

// Toggles the 'traverse this area by walking' flag used by the AI system.
nav_walk

// Warps the player to the marked area.
nav_warp_to_mark

// Centers the nav mesh in the world
nav_world_center

// Sends a command string to all bots
nb_command

// Debug NextBots.  Categories are: BEHAVIOR, LOOK_AT, PATH, ANIMATION, LOCOMOTION, VISION, HEARING, EVENTS, ERRORS.
nb_debug

// Add items to the NextBot debug filter. Items can be entindexes or part of the indentifier of one or more bots.
nb_debug_filter

// Force selected bot to look at the local player's position
nb_force_look_at

// Tell all NextBots to move to the cursor position
nb_move_to_cursor

// Select the bot you are aiming at for further debug operations.
nb_select

// Teleport the selected bot to your cursor position
nb_warp_selected_here

// Shows net channel info
net_channels

// Dumps out a report of game event network usage
net_dumpeventstats

// Inits multiplayer network sockets
net_start

// Shows current network status
net_status

// Print status of steam connection sockets.
net_steamcnx_status

nextmap

// Toggle. Player becomes non-solid and flies.  Optional argument of 0 or 1 to force enable/disable
noclip

// Toggle. Player becomes hidden to NPCs.
notarget

obj_dump_damage

// Dispatches the test particle system with the parameters specified in particle_test_file,
//  particle_test_attach_mode and particle_test_attach_param on the entity the player is looking at.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
particle_test_start

// Stops all particle systems on the selected entities.
// 	Arguments:   	{entity_name} / {class_name} / no argument picks what player is looking at 
particle_test_stop

// Show the engine filesystem path.
path

// Toggle the server pause state.
pause

// Times the cost of each active object
physics_budget

// Highlights constraint system graph for an entity
physics_constraints

// Dumps debug info for an entity
physics_debug_entity

// Turns on the absbox for all active physics objects
physics_highlight_active

// Lists all active physics objects
physics_report_active

// Dumps debug info for an entity
physics_select

// Toggles 'picker' mode.  When picker is on, the bounding box, pivot and debugging text is displayed for whatever entity the player is looking at.
// 	Arguments:	full - enables all debug information
picker

// Display ping to server.
ping

// Ping a server for info
pingserver

// plugin_load <filename> : loads a plugin
plugin_load

// plugin_pause <index> : pauses a loaded plugin
plugin_pause

// pauses all loaded plugins
plugin_pause_all

// Prints details about loaded plugins
plugin_print

// plugin_unload <index> : unloads a plugin
plugin_unload

// plugin_unpause <index> : unpauses a disabled plugin
plugin_unpause

// unpauses all disabled plugins
plugin_unpause_all

// Shows name for prop looking at
prop_crosshair

// Toggle prop debug mode. If on, props will show colorcoded bounding boxes. Red means ignore all damage. White means respond physically to damage but never break. Green maps health in the range of 100 down to 1.
prop_debug

// Creates a dynamic prop with a specific .mdl aimed away from where the player is looking.
// 	Arguments: {.mdl name}
prop_dynamic_create

// Creates a physics prop with a specific .mdl aimed away from where the player is looking.
// 	Arguments: {.mdl name}
prop_physics_create

// Exit the engine.
quit

// Flush and reload LODs.
r_flushlod

r_printdecalinfo

// Recomputes clock speed (for debugging purposes).
recompute_speed

// Reload the most recent saved game (add setpos to jump to current view position on reload).
reload

// Remove weapon upgrade for active weapon to the player
remove_upgrade

// Remove a user ID from the ban list.
removeid

// Remove an IP address from the ban list.
removeip

// Lists all entities
report_entities

// Lists all simulating/thinking entities
report_simthinklist

// reports sound patch count
report_soundpatch

// Lists all touchlinks
report_touchlinks

// Reset a bunch of game convars to default values
reset_gameconvars

// Respawn all the entities in the map.
respawn_entities

// Restart the game on the same level (add setpos to jump to current view position on restart).
restart

// Set a list of concepts to exclude from rr_debugresponseconcept. Separate multiple concepts with spaces. Call with no arguments to see current list. Call 'rr_debug_responseconcept_exclude !' to reset.
rr_debugresponseconcept_exclude

// fire a response concept directly at a given character.
// USAGE: rr_forceconcept <target> <concept> "criteria1:value1,criteria2:value2,..."
// criteria values are optional.
// 
rr_forceconcept

// Reload all response system scripts.
rr_reloadresponsesystems

// Display player message
say

// Display player message to team
say_team

// Flush all .vcds from the cache and reload from disk.
scene_flush

// Play the given VCD as an instanced scripted scene.
scene_playvcd

// Gives the game time in seconds (server's curtime)
server_game_time

// Snap player eyes to specified pitch yaw <roll:optional> (must have sv_cheats).
setang

// Snap player eyes and orientation to specified pitch yaw <roll:optional> (must have sv_cheats).
setang_exact

// add/remove/enable/disable master servers
setmaster

// Changes's player's model
setmodel

// Set the pause state of the server.
setpause

// Move player to specified origin (must have sv_cheats).
setpos

// Move player to an exact specified origin (must have sv_cheats).
setpos_exact

// Move specified player to specified origin (must have sv_cheats).
setpos_player

// Shake the screen.
shake

// Toggle show triggers
showtriggers_toggle

// Add a simple bot.
simple_bot_add

// SourceMod Menu
sm

// sm_abortban
sm_abortban

// sm_addban <time> <steamid> [reason]
sm_addban

// Displays the admin menu
sm_admin

// Reload the advertisements
sm_advertisements_reload

// sm_ban <#userid|name> <minutes|0> [reason]
sm_ban

// sm_banip <ip|#userid|name> <time> [reason]
sm_banip

// sm_beacon <#userid|name> [0/1]
sm_beacon

// sm_blind <#userid|name> [amount] - Leave amount off to reset.
sm_blind

// sm_burn <#userid|name> [time]
sm_burn

// sm_cancelvote
sm_cancelvote

// sm_chat <message> - sends message to admins
sm_chat

sm_cheat

sm_conhook_start

sm_conhook_stop

// sm_cookies <name> [value]
sm_cookies

// sm_csay <message> - sends centered message to all players
sm_csay

// sm_cvar <cvar> [value]
sm_cvar

// sm_drug <#userid|name> [0/1]
sm_drug

// Dumps the admin cache for debugging
sm_dump_admcache

// Dumps the class list as a text file
sm_dump_classes

// Dumps the data map list as a text file
sm_dump_datamaps

// Dumps Handle usage to a file for finding Handle leaks
sm_dump_handles

// Dumps the networkable property table as a text file
sm_dump_netprops

// Dumps the networkable property table as an XML file
sm_dump_netprops_xml

// Dumps tempentity props to a file
sm_dump_teprops

// sm_execcfg <filename>
sm_execcfg

// Usage: sm_fcvar <name/#userid> <cvar> <value>
sm_fcvar

// sm_firebomb <#userid|name> [0/1]
sm_firebomb

// sm_freeze <#userid|name> [time]
sm_freeze

// sm_freezebomb <#userid|name> [0/1]
sm_freezebomb

// sm_gag <player> - Removes a player's ability to use chat.
sm_gag

// sm_gravity <#userid|name> [amount] - Leave amount off to reset. Amount is 0.0 through 5.0
sm_gravity

// Displays SourceMod commands and descriptions
sm_help

// sm_hsay <message> - sends hint message to all players
sm_hsay

// sm_kick <#userid|name> [reason]
sm_kick

// sm_map <map>
sm_map

// Shows the most recent maps played
sm_maphistory

// sm_msay <message> - sends message as a menu panel
sm_msay

// sm_mute <player> - Removes a player's ability to use voice.
sm_mute

// sm_noclip <#userid|name>
sm_noclip

// sm_play <#userid|name> <filename>
sm_play

// Prints the temp entity list
sm_print_telist

// sm_psay <name or #userid> <message> - sends private message
sm_psay

// sm_rcon <args>
sm_rcon

// Reparses all loaded translation files
sm_reload_translations

// sm_reloadadmins
sm_reloadadmins

// sm_rename <#userid|name>
sm_rename

// sm_resetcvar <cvar>
sm_resetcvar

sm_revote

// sm_say <message> - sends message to all players
sm_say

// Searches SourceMod commands
sm_searchcmd

sm_settings

// sm_silence <player> - Removes a player's ability to use voice or chat.
sm_silence

// sm_slap <#userid|name> [damage]
sm_slap

// sm_slay <#userid|name>
sm_slay

// sm_timebomb <#userid|name> [0/1]
sm_timebomb

// sm_tsay [color] <message> - sends top-left message to all players
sm_tsay

// sm_unban <steamid|ip>
sm_unban

// sm_ungag <player> - Restores a player's ability to use chat.
sm_ungag

// sm_unmute <player> - Restores a player's ability to use voice.
sm_unmute

// sm_unsilence <player> - Restores a player's ability to use voice and chat.
sm_unsilence

// Forces Updater to check for updates.
sm_updater_check

// View the status of Updater.
sm_updater_status

// sm_vote <question> [Answer1] [Answer2] ... [Answer5]
sm_vote

// sm_votealltalk
sm_votealltalk

// sm_voteban <player> [reason]
sm_voteban

// sm_voteburn <player>
sm_voteburn

// sm_voteff
sm_voteff

// sm_votegravity <amount> [amount2] ... [amount5]
sm_votegravity

// sm_votekick <player> [reason]
sm_votekick

// sm_votemap <mapname> [mapname2] ... [mapname5] 
sm_votemap

// sm_voteslay <player>
sm_voteslay

// sm_who [#userid|name]
sm_who

// Restart sound system.
snd_restart

// Flushes the server & client side soundscapes
soundscape_flush

// generates a fake spike
spike

// Start playing on specified map with max allowed splitscreen players.
ss_map

// Dump memory stats
star_memory

// Prints server performance variables
stats

// Display map and connection status.
status

// Create dictionary for current strings.
stringtabledictionary

// Parses and stuffs command line + commands to command buffer.
stuffcmds

// Reports the surface properties at the cursor
surfaceprop

// Force start the benchmark. This is only for debugging. It's better to set sv_benchmark to 1 and restart the level.
sv_benchmark_force_start

// Clear memory of server side hints displayed to the player.
sv_clearhinthistory

// Dump serialized entity allocations stats.
sv_dump_serialized_entities_mem

// Find sound names which reference the specified wave files.
sv_findsoundname

// Show precache info.
sv_precacheinfo

// Show user data.
sv_pure

// Display status of the query cache (client only)
sv_querycache_stats

// Describe current gametags.
sv_showtags

// Sets the server to shutdown when all games have completed
sv_shutdown

// Report missing wave files for sounds and game_sounds files.
sv_soundemitter_filecheck

// Flushes the sounds.txt system (server only)
sv_soundemitter_flush

// Flushes the sounds.txt system
sv_soundemitter_reload

// Print details about a sound.
sv_soundemitter_spew

// print soundscapes
sv_soundscape_printdebuginfo

test_bans

// Test a clientside dispatch effect.
// 	Usage: test_dispatcheffect <effect name> <distance away> <flags> <magnitude> <scale>
// 	Defaults are: <distance 1024> <flags 0> <magnitude 0> <scale 0>
// 
test_dispatcheffect

// Test command that drops an entity blocker out in front of the player.
test_entity_blocker

// Test a grenade target
test_grenade_target

test_outtro_stats

thread_test_tslist

thread_test_tsqueue

// Cycles threadpool reservation by powers of 2
threadpool_cycle_reserve

threadpool_run_tests

timeleft

// Toggles a convar on or off, or cycles through a set of values.
toggle

tools_cvarlist

// Shows list of connected SourceTV clients.
tv_clients

// Send a screen message to all clients.
tv_msg

// Starts SourceTV demo recording.
tv_record

// Connect to SourceTV server and relay broadcast.
tv_relay

// Reconnects the SourceTV relay proxy.
tv_retry

// Show SourceTV server status.
tv_status

// Stops the SourceTV broadcast.
tv_stop

// Stops SourceTV demo recording.
tv_stoprecord

// Unbind a key.
unbind

// Unbind all keys.
unbindall

// Unbind all joystick keys.
unbindalljoystick

// Unbind all mouse / keyboard keys.
unbindallmousekeyboard

// Unpause the game.
unpause

// Use a particular weapon	
// Arguments: <weapon_name>
use

// Show user data.
user

// Show user info for players on server.
users

// Print version info string.
version

// Mute a specific Steam user
voice_mute

// Reset all mute information for all players who were ever muted.
voice_reset_mutelist

// Show whether current players are muted.
voice_show_mute

// Unmute a specific Steam user, or `all` to unmute all connected players.
voice_unmute

// Reload sentences.txt file
vox_reload

// View entities in the voxel-tree inside box <Vector(min), Vector(max)>.
voxeltree_box

// View entities in the voxel-tree at the player position.
voxeltree_playerview

// View entities in the voxel-tree inside sphere <Vector(center), float(radius)>.
voxeltree_sphere

// View entities in the voxel-tree.
voxeltree_view

// set sleep timeout: large values mean stuff won't ever sleep
vphys_sleep_timeout

// Toggle VProf profiler
vprof

// Toggle VProf cache miss checking
vprof_cachemiss

// Turn off VProf cache miss checking
vprof_cachemiss_off

// Turn on VProf cache miss checking
vprof_cachemiss_on

// Dump vprof counters to the console
vprof_dump_counters

// Write the names of all of the vprof groups to the console.
vprof_dump_groupnames

// Generate a report to the console.
vprof_generate_report

// Generate a report to the console.
vprof_generate_report_AI

// Generate a report to the console.
vprof_generate_report_AI_only

// Generate a report to the console based on budget group.
vprof_generate_report_budget

// Generate a report to the console.
vprof_generate_report_hierarchy

// Generate a minimal hiearchical report to the console.
vprof_generate_report_hierarchy_per_frame_and_count_only

// Generate a report to the console.
vprof_generate_report_map_load

// Turn off VProf profiler
vprof_off

// Turn on VProf profiler
vprof_on

// Average the next N frames.
vprof_playback_average

// Start playing back a recorded .vprof file.
vprof_playback_start

// While playing back a .vprof file, step to the next tick.
vprof_playback_step

// While playing back a .vprof file, step to the previous tick.
vprof_playback_stepback

// Stop playing back a recorded .vprof file.
vprof_playback_stop

// Start recording vprof data for playback later.
vprof_record_start

// Stop recording vprof data
vprof_record_stop

// Reset the stats in VProf profiler
vprof_reset

// Reset just the peak time in VProf profiler
vprof_reset_peaks

// Convert a recorded .vprof file to .csv.
vprof_to_csv

// enable vtune for a particular vprof group ("disable" to disable)
vprof_vtune_group

// Clear all nav attributes of selected area.
wipe_nav_attributes

// Writes a list of permanently-banned user IDs to banned_user.cfg.
writeid

// Save the ban list to banned_ip.cfg.
writeip

